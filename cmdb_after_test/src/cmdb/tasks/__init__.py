# -*- coding: utf-8 -*-from celery import Celeryfrom application import db,appfrom celery.signals import task_postrunfrom models.user import Userfrom models.host import Hostfrom models.device import Devicefrom models.supplier import Supplierfrom models.device_category import DeviceCategoryfrom models.rack import Rackfrom models.datacenter import Datacenterfrom models.ip_address import IpAddressfrom models.device_ip import DeviceIpimport datetimecelery = Celery("cmdb")celery.config_from_object(app.config)@task_postrun.connectdef close_session(*args, **kwargs):    # Flask SQLAlchemy will automatically create new sessions for you from    # a scoped session factory, given that we are maintaining the same app    # context, this ensures tasks have a fresh session (e.g. session errors    # won't propagate across tasks)    db.session.remove()@celery.task(ignore_result=True)def sendmail(msg, recipients):    pass@celery.task(ignore_result=True)def update_user_info(uid, authinfo, access_token):    userinfo=User.query.filter(User.id==uid).first()    if userinfo.mobile != authinfo['mobile']:       userinfo.mobile = authinfo['mobile']    email = userinfo.email.split(",")    if authinfo['email'] not in email:        email.append(authinfo['email'])        userinfo.email = ",".join(email)    if userinfo.oauth_token != access_token:        userinfo.oauth_token = access_token    userinfo.updated = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")    db.session.add(userinfo)    db.session.commit()@celery.task(ingore_result=True)def host_device_changed(id, type, status):    print("host_device_change")    if status != 3:        label = ""        model = ""        cpu = 0        storage = 0        memory = 0        supplier_name = ""        supplier_short = ""        category_name = ""        category_short = ""        rack_name = ""        datacenter_name = ""        parentname = ""        ip = ""        if type == 1:            host_id = id            host_info = Host.query.filter(Host.id == host_id).first()            if host_info:                sql = "select b.ipv4 from host_ip as a,ip_address as b where a.ip_address_id = b.id and a.host_id=%d"%host_id                ipinfo = db.engine.execute(sql)                if ipinfo:                    for item in ipinfo:                        ip = ip+" %s"%item.ipv4                device_id = host_info.device_id                hostname = host_info.hostname                note = host_info.note                host_type = host_info.type_descri                if host_info.is_virtual == 1:                    parentname = _get_host_name(host_info.parent_id)                cpu = host_info.cpu_descri                memory = host_info.memory_descri                storage = host_info.storage_descri                sql = "select b.ipv4 from device_ip as a,ip_address as b where a.ip_address_id = b.id and a.device_id=%d"%device_id                ipsinfo=db.engine.execute(sql).fetchall()                if ipsinfo:                    for item in ipsinfo:                        ip = ip+" %s"%item.ipv4                host_info.search = "%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s"%(hostname, host_type, parentname, ip, cpu, memory, storage, note)                db.session.commit()        else:            device_id =id            device_info = Device.query.filter(Device.id == device_id).first()            if device_info:                sn = device_info.sn                label = device_info.device_label                model = device_info.model                cpu = device_info.cpu_info()                memory = device_info.memory_info()                storage = device_info.storage_info()                supplier = Supplier.query.filter(Supplier.id == device_info.supplier_id).first()                if supplier:                    supplier_name = supplier.name                    supplier_short = supplier.short_name                device_category = DeviceCategory.query.filter(DeviceCategory.id == device_info.device_cat_id).first()                if device_category:                    category_name = device_category.name                    category_short = device_category.short_name                rack = Rack.query.filter(Rack.id == device_info.rack_id).first()                if rack:                    rack_name = rack.name                    datacenter = Datacenter.query.filter(Datacenter.id == rack.datacenter_id).first()                    datacenter_name = datacenter.name                sql="select b.ipv4 from device_ip as a,ip_address as b where a.ip_address_id = b.id and a.device_id=%d"%device_info.id                ipsinfo=db.engine.execute(sql).fetchall()                if ipsinfo:                    for item in ipsinfo:                        ip=ip+" %s"%item.ipv4                host_info = Host.query.filter(Host.device_id == device_id).first()                if host_info:                    host_id=host_info.id                    sql="select b.ipv4 from host_ip as a,ip_address as b where a.ip_address_id = b.id and a.host_id=%d"%host_id                    ipsinfo=db.engine.execute(sql).fetchall()                    if ipsinfo:                        for item in ipsinfo:                            ip=ip+" %s"%item.ipv4                device_info.search = "%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s#@#%s"%(label, sn, supplier_name, supplier_short, category_name, category_short, rack_name, datacenter_name, model, ip, cpu, memory, storage)                db.session.commit()    else:        if type == 1:            host_info = Host.query.filter(Host.id == id).first()            host_info.search = ""            db.session.commit()        else:            device_info = Device.query.filter(Device.id == id).first()            device_info.search = ""            db.session.commit()def _get_host_name(id):    host_info = Host.query.filter(Host.id == id).first()    if host_info:        return str(host_info.hostname)