# -*- coding: utf-8 -*-from sqlalchemy import *from config import MIGRATE_DATABSE_URIfrom application import dbfrom models.device_category import DeviceCategoryfrom models.supplier import Supplierfrom models.datacenter import Datacenterfrom models.rack import Rackfrom models.device import Devicefrom models.device_ip import DeviceIpfrom models.ip_address import IpAddressfrom models.host import Hostfrom models.host_ip import HostIpimport datetimeimport json,reclass devicemigrate:    def run(self):        db.engine.execute("truncate table device")        db.engine.execute("truncate table device_ip")        db.engine.execute("truncate table host")        db.engine.execute("truncate table host_ip")        engine = create_engine(MIGRATE_DATABSE_URI, encoding='utf-8',echo=False)        connection = engine.connect()        tmpzeusdeivcecat = connection.execute("select id, `desc` from `type`")        zeusdeivcecat={}        tmpcmdbdevicecat=DeviceCategory.query.all()        cmdbdevicecat={}        cmdspecailcatid=0        if tmpzeusdeivcecat:            for item in tmpzeusdeivcecat:                zeusdeivcecat['sid_%s'%item['id']]=item['desc']        if tmpcmdbdevicecat:            for item in tmpcmdbdevicecat:                cmdbdevicecat['%s'%item.name]=item.id                if item.name == "服务器":                   cmdspecailcatid = item.id        tmpzeussupplier=connection.execute("select id, `title` from `agent`")        zeussupplier={}        tmpcmdbsupplier=Supplier.query.all()        cmdbsupplier={}        if tmpzeussupplier:            for item in tmpzeussupplier:                zeussupplier['agent_id_%s'%item['id']]=item['title']        if tmpcmdbsupplier:            for item in tmpcmdbsupplier:                cmdbsupplier['%s'%item.short_name]=item.id        tmpzeusidc=connection.execute("select a.id as dc_id,a.name as dc_name ,b.id as rack_id,b.name as rack_name from location as a,rack as b where a.id=b.location_id")        zeusidc={}        if tmpzeusidc:            for item in tmpzeusidc:                zeusidc['%s_%s'%(item['dc_id'],item['rack_id'])]='%s_%s'%(item['dc_name'].lower(),item['rack_name'].lower())        tmpcmdbdc=Datacenter.query.all()        cmdbdc={}        if tmpcmdbdc:            for item in tmpcmdbdc:                cmdbdc['dc_%s'%item.id]=item.name        tmpcmdbrack=Rack.query.all()        cmdbidc={}        if tmpcmdbrack:            for item in tmpcmdbrack:                cmdbidc['%s_%s'%(cmdbdc['dc_%s'%item.datacenter_id].lower(),item.name.lower())]=item.id        tmpzeusdevice=connection.execute("select *  from `item` where type_id!=6")        zeusdevice=[]        if tmpzeusdevice:            for item in tmpzeusdevice:                device_cat_id=0                if 'sid_%s'%item['type_id'] in zeusdeivcecat:                    device_cat_id=cmdbdevicecat[zeusdeivcecat['sid_%s'%item['type_id']]]                supplier_id=0                if 'agent_id_%s'%item['agent_id'] in zeussupplier:                    supplier_id=cmdbsupplier[zeussupplier['agent_id_%s'%item['agent_id']]]                rack_id=0                if '%s_%s'%(item['location_id'],item['rack_id']) in zeusidc:                    rack_id=cmdbidc[zeusidc['%s_%s'%(item['location_id'],item['rack_id'])]]                tmp={                    'zeus_id':item['id'],                    'device_cat_id':device_cat_id,                    'supplier_id':supplier_id,                    'rack_id':rack_id,                    'model':item['model'],                    'memory':item['ram'],                    'memory_extra':item['ram'],                    'cpu':item['cores'],                    'cpu_extra':json.dumps([{'num': item['cores'], 'model': ''}]),                    'storage':item['hd'],                    'storage_extra':'',                    'rack_unit':item['size'],                    'sn':item['sn'],                    'device_label':item['servicetag'],                    'rack_offset':item['rack_pos'],                    'primary_ip_id':0,                    'primary_mac':'',                    'buy_time':item['purchase_date'],                    'elapsed_time':item['warranty'],                    'price':'0',                    'content':item['application'],                    'hostname':''                }                #获取ip                tmpzeusips=connection.execute("select *  from `network` where item_id = %d "%item['id'])                zuesips=[]                if tmpzeusips:                    for ipitem in tmpzeusips:                        racinfo=IpAddress.query.filter(IpAddress.ipv4==ipitem['ipv4']).first()                        if not racinfo:                            continue                        if ipitem['eth'] == "rac":                                tmp['primary_ip_id']=racinfo.id                                tmp['primary_mac']=ipitem['mac'] if ipitem['mac'] else ''                                zuesips.append({'net_name_id':0,'ip_address_id':racinfo.id,'mac':tmp['primary_mac'],'eth':''})                        else:                            zuesips.append({'net_name_id':1,'ip_address_id':racinfo.id,'mac':ipitem['mac'],'eth':ipitem['eth']})                tmp['device_ip']=zuesips                #获取磁盘                tmpzeusdisk=connection.execute("select app_name,disks  from `hosts` where item_id = %d "%item['id']).fetchall()                tmpcmdbdisks=[]                if tmpzeusdisk:                    for diskitem1 in tmpzeusdisk:                        tmp['hostname']=diskitem1['app_name'] if diskitem1['app_name'] else item['label']                        if not diskitem1['disks']:                            continue                        tmpjson=re.sub(r"(,?)(\w+?)\s*?:", r"\1'\2':", str(diskitem1['disks']))                        tmpjson=tmpjson.replace("'", "\"")                        diskitem2=[]                        try:                            diskitem2=json.loads(tmpjson)                        except:                            pass                        for tmpdiskitem1 in diskitem2:                            for tmpdiskitem2 in tmpdiskitem1:                                tmpcmdbdisks.append({                                            'capacity': tmpdiskitem1[tmpdiskitem2].split(".")[0],                                            'speed': '',                                            'interface': '',                                            'size': '',                                            'name':tmpdiskitem2                                })                if len(tmpcmdbdisks)>0 :                    tmp['storage_extra']=json.dumps(tmpcmdbdisks)                if tmp['hostname'] is None or len(tmp['hostname'])<1:                    tmp['hostname']=item['label']                zeusdevice.append(tmp)            for item in zeusdevice:                dev = Device()                dev.device_cat_id=item['device_cat_id']                dev.supplier_id=item['supplier_id']                dev.model=item['model'] if item['model'] else ''                dev.cpu=item['cpu']  if item['cpu'] else 0                dev.cpu_extra=item['cpu_extra']                dev.memory=item['memory']  if item['memory'] else 0                dev.memory_extra=item['memory_extra'] if  item['memory_extra'] else 0                dev.storage=item['storage'] if item['storage'] else 0                dev.storage_extra=item['storage_extra']                dev.rack_unit=item['rack_unit'] if item['rack_unit'] else 0                dev.sn=item['sn'] if item['sn'] else ''                dev.device_label=item['device_label'] if item['device_label'] else ''                dev.primary_mac=item['primary_mac']                dev.rack_id=item['rack_id']                dev.rack_offset=item['rack_offset'] if item['rack_offset'] else 0                dev.primary_ip_id=item['primary_ip_id']                dev.buy_time=item['buy_time'] if item['buy_time'] else '2000-01-01 00:00:00'                tmpelapsed_time= item['elapsed_time'] if item['elapsed_time'] else '2000-01-01 00:00:00'                if  tmpelapsed_time=="2000-01-01 00:00:00" and item['buy_time']:                    tmpelapsed_time=item['buy_time']                dev.elapsed_time=tmpelapsed_time                dev.price=item['price']                dev.content=item['content'] if item['content'] else ''                dev.deleted=0                tmptime=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")                dev.created=tmptime                dev.updated=tmptime                db.session.add(dev)                db.session.commit()                if dev.id:                    if int(item['device_cat_id']) == int(cmdspecailcatid) : #如果是服务器 只插入远程控制卡 其他ip放在主机里面                        if int(item['primary_ip_id']) > 0: #如果ip没有就不插入设备表了                            dev_ip=DeviceIp()                            dev_ip.device_id=dev.id                            dev_ip.net_name_id=0                            dev_ip.mac=item['primary_mac']                            dev_ip.ip_address_id=item['primary_ip_id']                            dev_ip.content=''                            tmptime=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")                            dev_ip.created=tmptime                            dev_ip.updated=tmptime                            db.session.add(dev_ip)                            db.session.commit()                        #如果是服务器也要进主机列表                        target=Host(item['hostname'],0,1,0,0,dev.id,1,dev.cpu,dev.memory,dev.storage,'')                        db.session.add(target)                        db.session.commit()                        if target.id:                            for dev_ip_item in item['device_ip']:                                if dev_ip_item['net_name_id']==1:                                    print "=======%d========"%item['zeus_id']                                    print dev_ip_item['eth']                                    tmpstrreg=re.compile('^eth\d(:\d)?$')                                    if not tmpstrreg.match(str(dev_ip_item['eth'])):                                        continue                                    tmpethnum=dev_ip_item['eth'].replace("eth","")                                    tmpnetarray=tmpethnum.split(":")                                    tmpnet_name_id=int(tmpnetarray[0])                                    tmp_virtual_net_id=99                                    if len(tmpnetarray) == 2:                                        tmp_virtual_net_id = int(tmpnetarray[1])                                    hostiptarget=HostIp(target.id,tmpnet_name_id,dev_ip_item['ip_address_id'],type=tmp_virtual_net_id)                                    db.session.add(hostiptarget)                                    db.session.commit()                    else:                        for dev_ip_item in item['device_ip']:                            dev_ip=DeviceIp()                            dev_ip.device_id=dev.id                            dev_ip.net_name_id=dev_ip_item['net_name_id']                            dev_ip.mac=dev_ip_item['mac']                            dev_ip.ip_address_id=dev_ip_item['ip_address_id']                            dev_ip.content=''                            tmptime=datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")                            dev_ip.created=tmptime                            dev_ip.updated=tmptime                            db.session.add(dev_ip)                            db.session.commit()        connection.close()