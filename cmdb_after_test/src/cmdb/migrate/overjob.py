# -*- coding: utf-8 -*-from models.host import Hostfrom models.host_ip import HostIpfrom sqlalchemy import *from config import MIGRATE_DATABSE_URIfrom application import dbfrom models.ip_address import IpAddressfrom models.host import Hostfrom models.host_ip import HostIpfrom models.device import Devicefrom models.device_ip import DeviceIpfrom xml.etree import ElementTreeclass overjobmigrate:    def run(self):        self.changeHostPrimaryId()        self.completePrimaryId()        self.completeapchostinfo()        self.completevspherehostinfo()        self.changeipStatus()    def changeHostPrimaryId(self):        info=HostIp.query.filter(and_(HostIp.net_name_id==0,HostIp.type==99)).all()        if info:            for item in info:                hinfo=Host.query.filter(Host.id==item.host_id).first()                if hinfo:                    hinfo.primary_ip_id=item.ip_address_id                    db.session.commit()    def completePrimaryId(self):        info=Host.query.filter(Host.primary_ip_id==0).all()        if info:            for item in info:                tmpinfo=Host.query.filter(Host.id==item.id).first()                hinfo=HostIp.query.filter(HostIp.host_id==item.id).first()                if hinfo:                    tmpinfo.primary_ip_id=hinfo.ip_address_id                    db.session.commit()    def changeipStatus(self):        engine = create_engine(MIGRATE_DATABSE_URI, encoding='utf-8',echo=False)        connection = engine.connect()        ips=connection.execute("select ipv4 from `network`").fetchall()        noips=[]        if ips:            for item in ips:                tmpinfo=IpAddress.query.filter(IpAddress.ipv4==item['ipv4']).first()                if tmpinfo:                    tmpinfo.flag=1                    db.session.commit()                else:                    noips.append(item['ipv4'])    #找回所有apc虚拟机的父亲关系    def completeapchostinfo(self):        engine = create_engine(MIGRATE_DATABSE_URI, encoding='utf-8',echo=False)        connection = engine.connect()        yunhost=connection.execute("select oid,name,body from `vm_pool` where state = 3").fetchall()        yunhost_relation={}        runapc_hostname=[]        if yunhost:            for item in yunhost:                runapc_hostname.append(item['name'])                tmproot = ElementTree.fromstring(item['body'])                tmpip = tmproot.getiterator("IP")                ip=""                phostname=""                for node in tmpip:                    ip=node.text                tmpparenthostname=tmproot.getiterator('HOSTNAME')                for node in tmpparenthostname:                    phostname=node.text                yunhost_relation[ip]=phostname        specialip=[]        changedhosts=[]        if yunhost_relation:            for item in yunhost_relation:                host_id=''                if not item:                    continue                ipinfo=IpAddress.query.filter(IpAddress.ipv4==item).first()                if ipinfo:                    hostipinfo=HostIp.query.filter(HostIp.ip_address_id==ipinfo.id).first()                    if hostipinfo:                        host_id=hostipinfo.host_id                    else:                        deviceipinfo=DeviceIp.query.filter(DeviceIp.ip_address_id==ipinfo.id).first()                        if deviceipinfo:                            hostinfo=Host.query.filter(Host.device_id==deviceipinfo.device_id).first()                            if hostinfo:                                host_id=hostinfo.id                            else:                                specialip.append(item)                        else:                            specialip.append(item)                else:                    specialip.append(item)                if host_id:                    hostinfo=Host.query.filter(Host.hostname==yunhost_relation[item]).first()                    if hostinfo:                        phostid=hostinfo.id                        device_id=hostinfo.device_id                        if phostid and device_id:                            #这个时候更新虚拟主机的parentid和deviceid,条件是host_id                            vhostinfo=Host.query.filter(Host.id==host_id).first()                            vhostinfo.parent_id=phostid                            vhostinfo.device_id= 0                            db.session.commit()                            changedhosts.append(host_id)                        hostinfo.type=2                        db.session.commit()        #将已经删除的机器在cmdb也删除了        deletedapc=connection.execute("select oid,name,body from `vm_pool` where state = 6").fetchall()        if deletedapc:            for item in deletedapc:                hostname = item['name']                if hostname in ['xapp10-085']:                    continue                if hostname in runapc_hostname:                    continue                apchostinfo=Host.query.filter(Host.hostname == hostname).first()                if apchostinfo:                    apchostinfo.deleted = 1                    db.session.commit()                    apchostip_info = HostIp.query.filter(HostIp.host_id == apchostinfo.id).all()                    if apchostip_info:                        for item in apchostip_info:                            ip_info = IpAddress.query.filter(IpAddress.id == item.ip_address_id).first()                            ip_info.flag = 0                            db.session.commit()                        HostIp.query.filter(HostIp.host_id == host_id).delete()    #找回所有vsphere虚拟机的父亲关系    def completevspherehostinfo(self):        engine = create_engine(MIGRATE_DATABSE_URI, encoding='utf-8',echo=False)        connection = engine.connect()        vhostinfo=connection.execute("select phostname,pip,hostname,ip from `vsphere` where pid!=0").fetchall()        if vhostinfo:            for item in vhostinfo:                hostinfo=Host.query.filter(Host.hostname==item['phostname']).first()                if hostinfo:                    parentid=hostinfo.id                    device_id=hostinfo.device_id                    xvhostinfo=Host.query.filter(Host.hostname==item['hostname']).first()                    if xvhostinfo:                        xvhostinfo.parent_id=parentid                        xvhostinfo.device_id= 0                        ipinfo=IpAddress.query.filter(IpAddress.ipv4==item['ip']).first()                        if xvhostinfo.primary_ip_id != ipinfo.id:                           has_in = HostIp.query.filter(HostIp.ip_address_id == ipinfo.id).first()                           if  has_in:                               pass                           else:                               ip_relation = HostIp(xvhostinfo.id,0,ipinfo.id,type=99)                               db.session.add(ip_relation)                               db.session.commit()                           xvhostinfo.primary_ip_id = ipinfo.id                        db.session.commit()                    pipinfo=IpAddress.query.filter(IpAddress.ipv4==item['pip']).first()                    if hostinfo.primary_ip_id != pipinfo.id:                        hostinfo.primary_ip_id = pipinfo.id                        hostinfo.type= 2                        db.session.commit()                        has_in = HostIp.query.filter(HostIp.ip_address_id == pipinfo.id).first()                        if  has_in:                            pass                        else:                            ip_relation = HostIp(hostinfo.id,0,pipinfo.id,type=99)                            db.session.add(ip_relation)                            db.session.commit()                else:                    print "============"