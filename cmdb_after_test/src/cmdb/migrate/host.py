# -*- coding: utf-8 -*-from sqlalchemy import *from config import MIGRATE_DATABSE_URIfrom application import dbfrom models.device_category import DeviceCategoryfrom models.supplier import Supplierfrom models.datacenter import Datacenterfrom models.rack import Rackfrom models.device import Devicefrom models.device_ip import DeviceIpfrom models.ip_address import IpAddressfrom models.host import Hostfrom models.host_ip import HostIpimport re#专门用来迁移虚拟机器的class hostmigrate:    def run(self):        nousedhosts=[ "one-998","one-965","one-960","one-946","one-932","one-938", "one-915","one-863","one-860", "one-858","one-857","one-856","one-855","one-854", "one-853","one-852","one-851","one-850","one-849","one-847","one-839","one-826","one-845", "one-793","one-832","one-967","one-820"]        engine = create_engine(MIGRATE_DATABSE_URI, encoding='utf-8',echo=False)        connection = engine.connect()        tmpzeusvhost=connection.execute("select id,ram,hd,cores,label from `item` where type_id=6").fetchall()        zeusvhost=[]        if tmpzeusvhost:            for item in tmpzeusvhost:                hostname=""                tmphostinfo=connection.execute("select app_name from `hosts` where item_id=%d "%item['id']).fetchall()                if  tmphostinfo:                     hostname=tmphostinfo[0]['app_name']                else:                     hostname=item['label']                if hostname is None or len(hostname)<1:                     hostname=item['label']                if hostname in nousedhosts:                    continue                tmp={                    'zeus_id':item['id'],                    'hostname':hostname,                    'primary_ip_id':0,                    'type':1,                    'is_virtual':1,                    'parent_id':0,                    'device_id':0,                    'status':1,                    'cpu':item['cores'] if item['cores'] else 0,                    'memory':item['ram'] if item['ram'] else 0,                    'storage':item['hd'] if item['hd'] else 0                }                #获取ip                tmpzeusips=connection.execute("select *  from `network` where item_id = %d "%item['id'])                zuesips=[]                if tmpzeusips:                    for ipitem in tmpzeusips:                        racinfo=IpAddress.query.filter(IpAddress.ipv4==ipitem['ipv4']).first()                        if not racinfo:                            continue                        zuesips.append({'ip_address_id':racinfo.id,'mac':ipitem['mac'],'eth':ipitem['eth']})                tmp['device_ip']=zuesips                zeusvhost.append(tmp)            for item in zeusvhost:                target=Host(item['hostname'],item['primary_ip_id'],item['type'],item['is_virtual'],item['parent_id'],item['device_id'],item['status'],item['cpu'],item['memory'],item['storage'],'',deleted=0)                db.session.add(target)                db.session.commit()                if target.id:                    for dev_ip_item in item['device_ip']:                        print "=======%d========"%item['zeus_id']                        print dev_ip_item['eth']                        tmpstrreg=re.compile('^eth\d(:\d)?$')                        if dev_ip_item['eth']=='':  #这类写的时候没有标注                           dev_ip_item['eth']='eth0'                        if not tmpstrreg.match(str(dev_ip_item['eth'])):                            continue                        tmpethnum=dev_ip_item['eth'].replace("eth","")                        tmpnetarray=tmpethnum.split(":")                        tmpnet_name_id=int(tmpnetarray[0])                        tmp_virtual_net_id=99                        if len(tmpnetarray) == 2:                            tmp_virtual_net_id = int(tmpnetarray[1])                        hostiptarget=HostIp(target.id,tmpnet_name_id,dev_ip_item['ip_address_id'],type=tmp_virtual_net_id)                        db.session.add(hostiptarget)                        db.session.commit()        connection.close()