# -*- coding: utf-8 -*-from application import app,dbfrom models import IpAddressfrom flask_login import current_userfrom datetime import datetimefrom flask import request, make_responsefrom models.action import Actionfrom models.user_role import UserRolefrom models.role_action import RoleActionfrom models.alarm import Alarmfrom sqlalchemy import and_from application import appfrom models.host import Hostfrom models.device import Devicefrom models.rack import Rackfrom models.datacenter import Datacenterfrom models.mail_queue import MailQueuefrom models.pool import Poolfrom models.pool_host import  PoolHostfrom views.log import addlogimport re,datetimeimport json,os,logging,hashlibimport urllib,urllib2def responsejson(code,msg,data=[]):    return app.response_class(json.dumps({'code':code,'msg':msg,'data':data}), mimetype='application/json')def oa_interface(username,superior=0):        params = {            'subordinate':0,            'superior':superior,            'type':'domain_account',            'value':username        }        sort_keys = sorted(params)        params_str = ""        for item_key in sort_keys:            params_str += "%s=%s&"%(item_key,params[item_key])        params_str = params_str[0:-1]        params_str += "ajkzwww"        params['auth'] = hashlib.md5(params_str.encode('utf-8')).hexdigest()        data = urllib.urlencode(params)        req = urllib2.Request(" http://home.corp.anjuke.com/api/getUser/",data)        response = urllib2.urlopen(req)        info = response.read()        oa_userinfo = {}        if info:            oa_userinfo = json.loads(info)        return oa_userinfodef zabbix_rmhost(hosts):    code = 400    if hosts:        hosts = hosts.split(',')        zabbix_user = app.config.get('ZABBIX_USER')        zabbix_pass = app.config.get('ZABBIX_PASS')        info = _get_idc(hosts)        if info['host10']:            zabbix10 = app.config.get('ZABBIX10_URL')            zabbix10_authkey = _get_auth_key(zabbix_user,zabbix_pass,zabbix10)            if zabbix10_authkey:                code = zabbix_delehost(zabbix10_authkey,info['host10'],zabbix10)        if info['host20']:            zabbix20 = app.config.get('ZABBIX20_URL')            zabbix20_authkey = _get_auth_key(zabbix_user,zabbix_pass,zabbix20)            if zabbix20_authkey:                code = zabbix_delehost(zabbix20_authkey,info['host20'],zabbix20)    if int(code) == 400:        msg = "error see log"    if int(code) == 200:        msg = "delete hosts success"    response = responsejson(code,msg)    return responsedef zabbix_delehost(auth_key,hosts,url):    code = "400"    ans = _get_host_id(auth_key,hosts,url)    if ans:        hostsname = ans['hostname']        hostsid   = ans['hostsid']        hostsids  = ans['hostids']        data = json.dumps(        {        "jsonrpc": "2.0",        "method": "host.delete",        "params": hostsid,        "auth": auth_key,        "id": 1        })        deleteinfo = zabbix_api(data,url)        deletefailedhosts = []        deletesuccesshosts = []        deletedhostid = []        if deleteinfo:            for info in deleteinfo['hostids']:                deletedhostid.append(str(info))            deletefailedid = list(set(hostsids) - set(deletedhostid))            if deletefailedid:                for i in deletefailedid:                    index = hostsids.index(i)                    deletefailedhosts.append(hostsname[index])                content = "delete host %s failed" %  deletefailedhosts                logwrite(content)            else:                code = 200                for i in deletedhostid:                    index = hostsids.index(i)                    deletesuccesshosts.append(hostsname[index])                content = "delete host %s success" %  deletesuccesshosts                logwrite(content)    return codedef _get_host_id(auth_key,hosts,url):    havehostids = {}    data = json.dumps(    {        "jsonrpc":"2.0",        "method":"host.get",        "params": {            "output": ["host","hostid"],            "filter": {"host": hosts}            },        "auth":auth_key,        "id":1,    })    hostinfo = zabbix_api(data,url)    if len(hostinfo):        hostsid = []        hostname = []        hostids = []        for info in hostinfo:            hostname.append(info['host'])            tmp = {'hostid':info['hostid']}            hostids.append(info['hostid'])            hostsid.append(tmp)        havehostids = {'hostname':hostname,'hostsid':hostsid,'hostids':hostids}        notfoundhost = list(set(hosts) - set(hostname))        if notfoundhost:            content = "not found %s hostid" %notfoundhost            logwrite(content)    else:        content = "not found %s hostid" %hosts        logwrite(content)    return havehostidsdef _get_auth_key(user,password,url):    data = json.dumps(    {        "jsonrpc": "2.0",        "method": "user.login",        "params": {        "user": user,        "password": password    },    "id": 0    })    auth_key = zabbix_api(data,url)    return auth_keydef zabbix_api(data,url):    HEADER = {"Content-Type": "application/json"}    request = urllib2.Request(url,data)    ans = ""    for key in HEADER:        request.add_header(key,HEADER[key])    try:        result = urllib2.urlopen(request)    except urllib2.URLError as e:        if hasattr(e, 'reason'):            content =  'We failed to reach a server.' + e.reason        elif hasattr(e, 'code'):            content =  'The server could not fulfill the request.' + e.code        logwrite(content)    else:        response = json.loads(result.read())        result.close()    try:        ans =  response['result']    except Exception :        content = str(response['error']) + data        logwrite(content)    return  ansdef _get_idc(hosts):    ans = {'host10':[],'host20':[]}    for info in hosts:        device = 0        idc = 0        hostinfo = Host.query.filter(and_(Host.is_virtual == 1,Host.hostname == info)).first()        if hostinfo:            device = Device.query.filter(Device.id == (Host.query.filter(Host.id == hostinfo.parent_id).first().device_id or 0)).first() or 0        if device:            idc = Datacenter.query.filter(Datacenter.id == (Rack.query.filter(Rack.id == device.rack_id).first().datacenter_id or 0 )).first() or 0        if idc:            if idc.name == "IDC10":                ans['host10'].append(info)            if idc.name == "IDC20":                ans['host20'].append(info)    return  ansdef logwrite(content):    log_dir = app.config.get('ZABBIX_LOG_DIR')    if not os.path.exists(log_dir):        os.makedirs(log_dir)    logname = "zabbix_rm_host.log"    logging.basicConfig(filename=log_dir+'/'+logname,level=logging.DEBUG)    logging.debug(str(datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')) + "  "+ content)'''end zabbix delete host'''def _set_used_ip(id, flag=0, type=0, target_id=0):    ipaddress = IpAddress.query.filter(IpAddress.id == id).first()    if ipaddress:        if flag == 1:            ipaddress.flag = IpAddress.FLAG_USED        else:            ipaddress.flag = IpAddress.FLAG_AVAILABLE        ipaddress.type = type        ipaddress.target_id = target_id        ipaddress.updated = datetime.datetime.now()        db.session.add(ipaddress)        db.session.commit()def visible(external={}):    showbutton = {'add':'','modify':'','delete':''}    url = request.path    method = 'post'    pattern = re.compile(r'(.*)(/\d+$)')    if pattern.match(url):        url = pattern.match(url).group(1)    if url[-1] != "/":        url = url + '/'    for k,v in showbutton.items():        v = url + k + "_" + method        showbutton[k] = v    if external:        for k,v in external.items():            showbutton[k] = v    if current_user.is_admin:        for k,v in showbutton.items():            showbutton[k] = True        return showbutton    userroles = UserRole.query.filter(UserRole.user_id == current_user.id).all()    userroleids = []    for item in userroles:        userroleids.append(item.role_id)    for k,v in showbutton.items():        url = v[:(v.rfind('_'))]        method = v[((v.rfind('_'))+1):]        actions = Action.query.filter(and_(Action.url == url,Action.method == method)).first()        if actions:            roleactions = RoleAction.query.filter(and_(RoleAction.action_id == actions.id,RoleAction.role_id.in_(userroleids))).all()            if roleactions:                showbutton[k] = True            else:                showbutton[k] = False        else:            showbutton[k] = True    return showbuttondef addalarm(uid, type, target_id):    hasIn = Alarm.query.filter(and_(Alarm.type == type, Alarm.uid == uid, Alarm.target_id == target_id)).first()    if hasIn:        return    else:        alarmtarget = Alarm(uid=uid, type=type, target_id=target_id)        db.session.add(alarmtarget)        db.session.commit()def sendmail(subject, html, receiver):    import smtplib    from email.mime.text import MIMEText    if receiver is None or receiver == '':        return False    mail_list = receiver.split(';')    msg = MIMEText(html, 'html', 'utf-8')    msg['Subject'] = subject    msg['To'] = ";".join(mail_list)    try:        smtp = smtplib.SMTP()        smtp.connect(app.config['SMTP_SERVER'])        smtp.login(app.config['USER_NAME'], app.config['PASSWORD'])        smtp.sendmail(app.config['SENDER'], mail_list, msg.as_string())        smtp.quit()        return True    except:        return Falsedef addmail(email, subject, content):    if email:        email = email.replace(',', ';')        mail_target = MailQueue(email, subject, content, MailQueue.STATUS_FREE)        db.session.add(mail_target)        db.session.commit()def pool_color(ratio):    color = ''    if ratio>=90:        color = '#FF3300'    elif ratio>=70 and ratio <90:        color = '#FF6666'    elif ratio>=50 and ratio<60:        color = '#43ac6a'    else:        color = '#cccccc'    return colordef host_status_mapping(status):    if int(Host.STATUS_START) == int(status):        return '初始化'    elif int(Host.STATUS_READY) == int(status):        return '可使用'    elif int(Host.STATUS_ASSIGNED) == int(status):        return '已分配'    elif int(Host.STATUS_ONLINE) == int(status):        return '已上线'    elif int(Host.STATUS_ONLINE) == int(status):        return '未知'def api_auth_check(random,access_token):    ret = True    check_token = hashlib.md5('%s%s'%('cmdb_api',random)).hexdigest()    if check_token != access_token:        ret = False    return retdef api_wrap_response(errcode,msg,statuscode):    return make_response(responsejson(errcode, msg), statuscode)def formatJsonStr(respCmtJson):    respCmtJson = respCmtJson.decode('string-escape')    respCmtJson = re.sub(r"(,?)(\w+?)\s+?:", r"\1'\2' :", respCmtJson)    return str(respCmtJson.replace("'", "\""))