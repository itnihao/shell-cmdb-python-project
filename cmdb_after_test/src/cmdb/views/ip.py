# -*- coding: utf-8 -*-from flask import Blueprint, render_template,requestfrom flask_login import login_required,current_userfrom models.ip_address import IpAddressfrom application import app,dbfrom views.functions import responsejsonfrom pypages import Paginatorfrom .log import addlogimport re,json,IPyfrom views.functions import visibleip = Blueprint('ip', __name__)@ip.route("/")@ip.route("/page/<int:pnum>",methods=['GET', 'POST'])@login_requireddef index(pnum=1):    show = visible()    page = pnum    intreg=re.compile('^[1-9]\d*$')    if page:        if not intreg.match(str(page)):            page=1    else:        page=1    pageSize=50;    page=int(page)    iplist=IpAddress.query.paginate(page,pageSize,False)    pagecount=IpAddress.query.count()    pages=Paginator(pagecount, per_page=pageSize, current=page, range_num=10)    return render_template("idc/ip.html",iplist=iplist.items,paginate=pages,show=show)@ip.route("/add",methods=['GET', 'POST'])@login_requireddef add():    code=0    msg="添加机房成功"    ipaddr=request.form['ip']    if len(ipaddr)<=0:        code=1        msg="请填写有效的ip或者ip段:10.10.3.0/24";        return responsejson(code,msg)    tmpiparr=ipaddr.split(".")    if len(tmpiparr)!=4:        code=1        msg="请填写有效的ip或者ip段:10.10.3.0/24";        return responsejson(code,msg)    intreg=re.compile('^\d*$')    if not intreg.match(tmpiparr[0]) or int(tmpiparr[0])<0 or int(tmpiparr[0])>256:        code=1        msg="操作提示:第一段不对,请填写有效的ip或者ip段:10.10.3.0/24";        return responsejson(code,msg)    if not intreg.match(tmpiparr[1]) or int(tmpiparr[1])<0 or int(tmpiparr[1])>256:        code=1        msg="操作提示:第二段不对,请填写有效的ip或者ip段:10.10.3.0/24";        return responsejson(code,msg)    if not intreg.match(tmpiparr[2]) or int(tmpiparr[2])<0 or int(tmpiparr[2])>256:        code=1        msg="操作提示:第三段不对,请填写有效的ip或者ip段:10.10.3.0/24";        return responsejson(code,msg)    iplist = []    if '/' in ipaddr:        string = re.split('\.[0-9]+\/', ipaddr)        ipaddr = string[0] + '.0/' + string[1]        networkAddress = IPy.IP(ipaddr)        for i in networkAddress:            i = str(i)            iplist.append(i)    else:        if not intreg.match(tmpiparr[3]) or int(tmpiparr[3])<0 or int(tmpiparr[3])>256:            code=1            msg="操作提示:第四段不对,请填写有效的ip或者ip段:10.10.3.0/24";            return responsejson(code,msg)        iplist.append(ipaddr)    iflog=0    for itemip in iplist:        hasin=IpAddress.query.filter(IpAddress.ipv4==itemip).first()        if hasin:            if '/' not in ipaddr:                code=1                msg="操作提示:此ip已经存在";            continue        tmparr=itemip.split(".")        if int(tmparr[3])>10 and int(tmparr[3])<250:            iptarget=IpAddress(itemip,0)        else:            iptarget=IpAddress(itemip,2)        db.session.add(iptarget)        db.session.commit()        iflog=1    if iflog:        logmsg=" 添加IP:%d(%s)"%(len(iplist),ipaddr)        addlog(logmsg,1)    return responsejson(code,msg)def find_ipv4():    ip_info = {}    ip_list = IpAddress.query.filter(IpAddress.flag == IpAddress.FLAG_USED).all()    if ip_list:        for item_ip in ip_list:            ip_info[item_ip.id] = item_ip.ipv4        return ip_infodef get_ipinfo(**kwargs):    if 'id' in kwargs:        return IpAddress.query.filter(IpAddress.id == kwargs['id']).first()