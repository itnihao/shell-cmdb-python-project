# -*- coding: utf-8 -*-from __future__ import divisionfrom flask import Blueprint, render_template,request,url_for, redirectfrom flask_login import login_requiredfrom flask_login import current_userfrom application import app,dbfrom models.follow import Followfrom models.host import Hostfrom models.user import Userfrom models.pool import Poolfrom models.pool_host import PoolHostfrom models  import IpAddressfrom models.rack import Rackfrom models.device import Devicefrom models.datacenter import Datacenterfrom models.host_load_ratio import  HostLoadRatiofrom models.pool_load_ratio import PoolLoadRatiofrom views.functions import responsejsonfrom models.host_load_daily import  HostLoadDailyfrom models.pool_load_daily import  PoolLoadDailyfrom sqlalchemy import and_,or_from pypages import Paginatorimport urllib2from urllib2 import URLErrorimport jsonimport time, datetimeimport remonitor = Blueprint('monitor', __name__)@monitor.route("/")@login_requireddef index():    type = request.args.get('type') or 'follow_host'    nav_tips = "未知"    target_id = 0    if type == "follow_pool":        pool_id = request.args.get('pool_id')        target_id = pool_id        pool_info = db.session.query(Pool).filter(Pool.id == pool_id).first()        if pool_info:            nav_tips = pool_info.name    elif type == "follow_rack":        rack_id = request.args.get('rack_id') or 0        target_id = rack_id        if rack_id:            info = Rack.query.filter(Rack.id == rack_id).first()            if info:                idcname = Datacenter.query.filter(Datacenter.id == info.datacenter_id).first().name                nav_tips = idcname +'/' + info.name    settings = {"nav":"monitor"}    data = {        'tips':nav_tips,        'target_id':target_id,        'type':type    }    return render_template("monitor/index.html",data = data,int=int,settings=settings)@monitor.route("/act_load_data")def act_load_data():    code = 0    msg = '成功'    data = []    host_id = request.args.get('host_id') or 0    range = request.args.get('range') or 0    item_type = request.args.get('item_type') or 0    if not host_id:        code = 1        msg = '主机ID不合法'        return responsejson(code,msg,data)    host_info = Host.query.filter(Host.id == host_id).first()    if not host_info:        code = 1        msg = '主机不存在'        return responsejson(code,msg,data)    range = int(range)*60    if range == 0:        range = 30    key = "system.cpu.load[percpu,avg1]"    data = None    if item_type in ['iowait','load']:        if item_type == "iowait":            key = "system.cpu.util[,iowait]"        data = findHistory(host_info.hostname,'act=details&key=%s&range=%s'%(key, range))    if item_type == "mem":        data = {}        key = "vm.memory.size[available]"        data_free = findHistory(host_info.hostname,'act=details&key=%s&range=%s'%(key, range))        key = "vm.memory.size[total]"        data_total = findHistory(host_info.hostname,'act=details&key=%s&range=%s'%(key, range))        if data_free and data_total:            data['free'] = data_free            data['total'] = data_total    elif item_type == "net":        data = {}        key = "net.if.out[eth0]"        data_out = findHistory(host_info.hostname,'act=details&key=%s&range=%s'%(key, range))        key = "net.if.in[eth0]"        data_in = findHistory(host_info.hostname,'act=details&key=%s&range=%s'%(key, range))        if data_out and data_in:            data['out'] = data_out            data['in'] = data_in    ret_data = []    ret_categories = []    step = 1    point_count = 8    data_counter = 0    unit = '%'    title = 'Load average'    type = 'spline'    colors = ["#00b9d9", "#f0ca4d"]    if data:        if item_type in ["load","iowait"]:            if item_type == "iowait":                title = 'IOWAIT(%)'            ret_data.append({'name':'%s'%title,'data':[]})            for data_item in data:                ret_categories.append(str(data_item['tm']))                ret_data[0]['data'].append(float(data_item['value']))                data_counter += 1        elif item_type == "net":            unit = 'Mbps'            title = 'Network I/O (Mb/s)'            type = 'area'            ret_data.append({'name':'In','data':[]})            for data_item in data['in']:                ret_data[0]['data'].append(float(data_item['value']))            ret_data.append({'name':'Out','data':[]})            for data_item in data['out']:                ret_categories.append(str(data_item['tm']))                ret_data[1]['data'].append(float(data_item['value']))                data_counter += 1        elif item_type == "mem":            colors = ["#98cb65", "#f06c53"]            unit = 'GB'            title = 'Memory (GB)'            type = 'area'            ret_data.append({'name':'Used','data':[]})            tmp_idx = 0            for data_item in data['total']:                tmp_used = float(data_item['value']) - float(data['free'][tmp_idx]['value'])                tmp_used = '%.2f'%tmp_used                ret_data[0]['data'].append(float(tmp_used))                tmp_idx += 1            ret_data.append({'name':'Free','data':[]})            for data_item in data['free']:                ret_categories.append(str(data_item['tm']))                ret_data[1]['data'].append(float(data_item['value']))                data_counter += 1        if data_counter > point_count:            import math            step = math.ceil(data_counter/point_count)    else:        code = 1        msg = "失败"    resp_data = {        'data':ret_data[::-1],        'categories':ret_categories[::-1],        'step':step,        'title':title,        'unit':unit,        'type':type,        'colors':colors    }    response =  {'code':code,'data':resp_data,'msg':msg}    return  app.response_class(json.dumps(response), mimetype='application/json')@monitor.route("/pools",methods=['POST','GET'])@login_requireddef get_follow_pools():    code = 0    msg = "成功"    uid=current_user.id    followdPools = Follow.query.filter(and_(Follow.uid==uid, Follow.type==1)).all()    poolids=[]    data=[]    if followdPools:        for item in followdPools:            poolids.append(item.target_id)    if poolids:        poolinfos=Pool.query.filter(Pool.id.in_(poolids)).all()        if poolinfos:            for item in poolinfos:                data.append({'id':item.id,'name':item.name})    return responsejson(code,msg,data)@monitor.route("/racks",methods=['POST','GET'])@login_requireddef get_follow_racks():    code = 0    msg = "成功"    uid=current_user.id    followdracks = Follow.query.filter(and_(Follow.uid==uid, Follow.type==3)).all()    data=[]    if followdracks:        for item in followdracks:            rack = Rack.query.filter(Rack.id == item.target_id).first()            idcinfo = Datacenter.query.filter(Datacenter.id == rack.datacenter_id).first()            if idcinfo:                idcname = idcinfo.name                info = {'id':item.target_id,'rackname':rack.name,'idcname':idcname}                data.append(info)    return responsejson(code,msg,data)@monitor.route('/details')@login_requireddef details():    host_id = request.args.get('host_id') or 0    type = request.args.get('type','follow_host')    target_id = request.args.get('id',0)    if not host_id:        return redirect(url_for("monitor.index"))    host_info = Host.query.filter(Host.id == host_id).first()    if not host_info:        return redirect(url_for("monitor.index"))    settings = {"nav":"monitor"}    hostname = host_info.hostname    m = re.match("tjtx[a-zA-Z]*-\d+-\d+",hostname.lower())    if m:        zabbix_url = app.config.get("ZABBIX_API_URL")    zabbix_url = zabbix_url.replace("/api/fastApi.php","/charts.php?groupid=0")    zabbix_info = findHistory(hostname ,'act=getHostIdByHostname')    if zabbix_info:        # zabbix_url = '%s&hostid=%s'%(zabbix_url,zabbix_info[reghostname2zabbix(hostname,host_info.type,host_info.is_virtual)])        zabbix_url = '%s&hostid=%s'%(zabbix_url,zabbix_info[zabbix_info.keys()[0]])    return render_template("monitor/detail.html",host_info = host_info, type = type, target_id = target_id, settings = settings, zabbix_url = zabbix_url)# def reghostname2zabbix(hostname,type,isvm):    # if type==Host.TYPE_DB:    #     return 'db'+hostname    # elif type==Host.TYPE_APC:    #     return 'kvm'+hostname    # elif type==Host.TYPE_HADOOP:    #     return 'hd'+hostname    # elif type==Host.TYPE_APP:    #     if isvm==0:    #         return 'web'+hostname    #     else:    #         temp=hostname[:4]+'vm'+hostname[4:]    #         return 'web'+temp@monitor.route('/act_latest')def act_latest():    hostname = request.args.get('host_name') or None;    hostID = request.args.get('host_id') or 0;    if hostID :        hostInfo = db.session.query(Host).filter(Host.id == hostID).first();    else:        hostInfo = db.session.query(Host).filter(Host.hostname == hostname).first();    __hostname = hostname and hostname or hostInfo.hostname;    data = findHistory(__hostname,'act=getAllItems');    colorScheme = {'Tb':'red','Gb' :'#c0392b','Mb':'#2980b9','Kb':'#2c3e50'} ;    return render_template("monitor/monitor_act_latest_tpl.html",colorScheme=colorScheme,hostInfo=hostInfo,int=int,data=data,float=float)@monitor.route("/act_load_monitor")@login_requireddef act_load_monitor():    uid=current_user.id    type = request.args.get('type','follow_host')    target_id = request.args.get('id',0)    target_id = int(target_id)    if type == "follow_host":        followdHost = db.session.query(Host).filter(and_(Follow.target_id==Host.id, Follow.type==2, Follow.uid==uid)).all()    elif type =="follow_pool":        dbinfo = db.session.query(Host).filter(and_(PoolHost.pool_id==target_id,PoolHost.host_id==Host.id))        followdHost = dbinfo.all()    elif type =="follow_rack":        dbinfo = _get_rack_host(target_id)        if dbinfo:            followdHost = dbinfo.all()    __host =  []    for h in followdHost :        h.ipv4 = _get_ip( h.primary_ip_id )        h.history = findHistory(h.hostname) or {}        __host.append(h)    return render_template("monitor/monitor_act_loading_tpl.html",followdHost=__host,float=float,type = type, target_id = target_id)@monitor.route("/get_host_monitor/<int:id>")@login_requireddef get_host_monitor(id):    code = 0    msg = "成功"    data = {        'cpu':'--',        'mem':'--',        'net':'--',        'disk':'--',        'iowait':'--'    }    host_info = Host.query.filter(Host.id == id ).first()    if host_info:        last_data = findHistory(host_info.hostname)        if last_data:            tmp_cpu = '%s / %s / %s'%(last_data['cpu_1']['value'],last_data['cpu_5']['value'],last_data['cpu_15']['value'])            data['cpu'] = tmp_cpu            if 'available_mem_rate' in last_data:                data['mem'] = 100 - last_data['available_mem_rate']['value']                data['mem'] = '%s%%'%data['mem']            if 'total_disk_used' in last_data:                data['disk'] = last_data['total_disk_used']['value']                data['disk'] = '%s%%'%data['disk']            if 'net_in' in last_data or 'net_out' in last_data:                data['net']  = '%s / %s'%(last_data['net_in']['value'],last_data['net_out']['value'])            if 'iowait' in last_data:                data['iowait'] = last_data['iowait']['value']                data['iowait'] = '%s%%'%data['iowait']    return responsejson(code,msg,data)def findHistory(hostName,param=None):    import requests    # m = re.match("([a-zA-Z]+)(\d+)",hostName.lower())    m = re.match("tjtx[a-zA-Z]*-\d+-\d+",hostName.lower())    # api_url = app.config.get("ZABBIX_API_URL_10")    if m:        api_url = app.config.get("ZABBIX_API_URL")    appendParam = param or ''    try:        api_url = '%s?hostname=%s&%s'%  (api_url,hostName.lower(),appendParam)        resp = requests.get(api_url,timeout = 5)    except :        return None    result =  json.loads(resp.content)    if not result :        return None    if result["code"] != 0 :        return None    return result["data"]def _get_ip(id):    ip_info = IpAddress.query.filter(IpAddress.id == id).first()    return ip_info and ip_info.ipv4 or 0;def _get_rack_host(rack_id):    device = Device.query.filter(Device.rack_id == rack_id).all()    host_target = Host.query.filter(Host.deleted == Host.DELETED_NO)    dbinfo = ""    if device:        device_id = []        for item in device:            device_id.append(item.id)        hosts = host_target.filter(Host.device_id.in_(device_id)).all()        apc_id = []        if hosts:            for item in hosts:                if item.is_virtual == 0:                    apc_id.append(item.id)            dbinfo = host_target.filter(or_(Host.parent_id.in_(apc_id), Host.device_id.in_(device_id)))    return  dbinfo@monitor.route("/get_load_data",methods=['POST','GET'])@login_requireddef get_load_data():    type = request.args.get('type','pool').strip()    id   = int(request.args.get('id',0))    times = int(request.args.get('time',1))    search_time = get_search_time(times)    response = get_ration_current(search_time,id,type,times)    return app.response_class(json.dumps(response), mimetype='application/json')def get_ration_current(search_time,id,type,times):    code = 0    msg = "成功"    step = 1    point_count = 14    data_counter = 0    ret_data = []    ret_categories = []    begin_time =  search_time['begin_time']    end_time = search_time['end_time']    if type == "pool":        target_info = Pool.query.filter(Pool.id == id ).first()    elif type == "host":        target_info = Host.query.filter(Host.id == id).first()    if target_info:        if type == "pool":            tmp_title = '%s%s'%(target_info.source_desc,target_info.name)            if times == 1:                ratio_list = PoolLoadRatio.query.filter(and_(PoolLoadRatio.pool_id == id,PoolLoadRatio.created.between(begin_time,end_time))).all()            elif times == 90:                ratio_list = PoolLoadDaily.query.filter(and_(PoolLoadDaily.pool_id == id),PoolLoadDaily.created.between(begin_time,end_time)).all()        elif type == "host":            tmp_title = target_info.hostname            if times == 1:                ratio_list = HostLoadRatio.query.filter(and_(HostLoadRatio.host_id == id,HostLoadRatio.created.between(begin_time,end_time))).all()            elif times == 90:                ratio_list = HostLoadDaily.query.filter(and_(HostLoadDaily.host_id == id),HostLoadDaily.created.between(begin_time,end_time)).all()        ret_data.append({'name':'满载率','data':[]})        if ratio_list:            for item in ratio_list:                tmp_ratio = "%.2f" % (item.ratio * 100)                ret_data[0]['data'].append(float(tmp_ratio))                ret_categories.append(str(item.created))                data_counter += 1        if data_counter > point_count:                import math                step = math.ceil(data_counter/point_count)    else:        code = 1        msg = "失败"    return {'code':code,'data':ret_data,'msg':msg,'time':times,'categories':ret_categories,'step':step}def get_search_time(times):    import datetime    if times == 1:        begin_time = datetime.datetime.now().strftime('%Y-%m-%d 00:00:00')        end_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')    if times == 90:        today = datetime.date.today()        begin_time = str(today - datetime.timedelta(days=times)) + " 00:00:00"        end_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')    times = {'begin_time':begin_time,'end_time':end_time}    return timesdef responsejsons(code,data,msg,time,categories):    return app.response_class(json.dumps({'code':code,'data':data,'msg':msg,'time':time,'categories':categories}), mimetype='application/json')